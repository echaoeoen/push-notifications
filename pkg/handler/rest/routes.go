package rest

import (
	"fmt"

	"github.com/labstack/echo/v4"
	"github.com/oeoen/push-notifications/pkg/handler/rest/controllers"
	_ "github.com/oeoen/push-notifications/pkg/handler/rest/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/oeoen/push-notifications/pkg/notification"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func getRoutes(e *echo.Echo, m notification.Manager, c notification.Configuration) {
	if e == nil {
		e = echo.New()
	}

	e.GET("/swagger/*", echoSwagger.WrapHandler)

	e.GET(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
	), controllers.GetNewestNotification(m, c))

	e.GET(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications/newest/:%s",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
		controllers.NotificationParam["lastId"],
	), controllers.GetNewestNotification(m, c))

	e.GET(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications/next/:%s",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
		controllers.NotificationParam["lastId"],
	), controllers.GetNotificationNext(m, c))

	e.POST(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
	), controllers.SendNotification(m, c))

	e.POST(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
	), controllers.SendNotification(m, c))

	e.PUT(fmt.Sprintf(
		"/applications/:%s/users/:%s/fcm",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
	), controllers.PutFCMToken(m, c))

	e.GET(fmt.Sprintf(
		"/applications/:%s/users/:%s/fcm",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
	), controllers.GetFCMToken(m, c))

	e.PUT(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications/:%s/read",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
		controllers.NotificationParam["id"],
	), controllers.ReadNotification(m, c))

	e.GET(fmt.Sprintf(
		"/applications/:%s/users/:%s/notifications/unread",
		controllers.NotificationParam["application"],
		controllers.NotificationParam["username"],
	), controllers.UnreadCountNotification(m, c))
}
